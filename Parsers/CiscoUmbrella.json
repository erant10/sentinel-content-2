{
    "$schema": "https://schema.management.azure.com/schemas/2019-08-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "workspace": {
            "type": "string"
        }
    },
    "resources": [
        {
            "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
            "apiVersion": "2020-08-01",
            "name": "[concat(parameters('workspace'), '/ASimDnsCiscoUmbrella')]",
            "location": "[resourceGroup().location]",
            "properties": {
                "etag": "*",
                "displayName": "Cisco Umbrella DNS Events 1",
                "category": "Security",
                "FunctionAlias": "ASimDnsCiscoUmbrella",
                "query": "let DNSQuery_CiscoUmbrella=(disabled:bool=false){\n    Cisco_Umbrella_dns_CL | where not(disabled)\n    // \n    // *********** Parsing\n    | parse QueryType_s with DnsQueryType:int \" (\"DnsQueryTypeName:string \")\"\n    //\n    | project \n    //\n    // ******************* Mandatory\n       EventCount=int(1),\n       EventStartTime= column_ifexists(\"Timestamp_t\", todatetime(column_ifexists(\"Timestamp_s\",\"\"))),\n       EventProduct=\"Umbrella\",\n       EventVendor=\"Cisco Systems\",\n       EventSchemaVersion=\"0.1.1\",\n       Dvc=\"CiscoUmbrella\",\n       EventType=\"lookup\",\n       EventResult=iff(ResponseCode_s=~'NOERROR','Success','Failure'),\n       EventResultDetails=ResponseCode_s,  // => ResponseCodeNames\n       //\n       TimeGenerated, // not handled by schema, but we need to preserve it\n       SrcIpAddr=column_ifexists('InternalIp_s', ''),\n       EventSubType='response',\n  // ********** Renamed columns\n       UrlCategory=column_ifexists('Categories_s', ''),\n       DnsQuery=trim_end(@'\\.',column_ifexists('Domain_s', '')) , \n       ThreatCategory=column_ifexists('Blocked_Categories_s', ''),\n       SrcNatIpAddr=column_ifexists('ExternalIp_s', ''),\n       DvcAction=column_ifexists('Action_s', ''),\n       EventEndTime=todatetime(column_ifexists('Timestamp_t', '')),  // [is this the same as TimeGenrated?]\n   //\n   // *************** keep Parsed data\n       DnsQueryType, DnsQueryTypeName, \n   //\n   // **** Not in schema\n       Identities=column_ifexists('Identities_s', ''), \n       IdentityTypes=column_ifexists('Identity_Types_s', ''),\n       PolicyIdentity=column_ifexists('Policy_Identity_s', ''),\n       PolicyIdentityType=column_ifexists('Policy_Identity_Type_s', '')\n  //\n  // **************Aliases\n  | extend \n      DnsResponseCodeName=EventResultDetails, \n      DomainCategory=UrlCategory,\n      Domain=DnsQuery,\n      IpAddr=SrcIpAddr\n  // Backward Competability\n  | extend\n      Query=DnsQuery\n      , QueryType=DnsQueryType\n      , ResponseCodeName=DnsResponseCodeName\n      , QueryTypeName=DnsQueryTypeName\n      // \n       };\nDNSQuery_CiscoUmbrella(disabled)",
                "version": 1,
                "functionParameters": "disabled:bool=False"
            }
        }
    ]
}
